name: CI - Build and Push Docker Image

on:
  push:
    branches:
      - CA-Demo
  pull_request:
    branches:
      - CA-Demo

permissions:
  contents: read
  packages: write

jobs:
  # 1. Checkout and prepare
  prepare:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.set-vars.outputs.image_name }}
      image_tag: ${{ steps.set-vars.outputs.image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set image variables
        id: set-vars
        run: |
          echo "image_name=ghcr.io/${{ github.repository_owner }}/ca-app" >> $GITHUB_OUTPUT
          echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  # 2. Build Docker image
  build:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ needs.prepare.outputs.image_name }}:${{ needs.prepare.outputs.image_tag }} \
                       -t ${{ needs.prepare.outputs.image_name }}:latest .

  # 3. Push Docker image
  push:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image (commit SHA + latest)
        run: |
          docker push ${{ needs.prepare.outputs.image_name }}:${{ needs.prepare.outputs.image_tag }}
          docker push ${{ needs.prepare.outputs.image_name }}:latest

  # 4. Cleanup local Docker images
  cleanup-local:
    runs-on: ubuntu-latest
    needs: [prepare, push]
    steps:
      - name: Remove local Docker images
        run: |
          docker rmi -f ${{ needs.prepare.outputs.image_name }}:${{ needs.prepare.outputs.image_tag }} || true
          docker rmi -f ${{ needs.prepare.outputs.image_name }}:latest || true

  # 5. Retain only last 5 images
  prune-ghcr:
    runs-on: ubuntu-latest
    needs: [prepare, push]
    steps:
      - name: Delete old images, keep last 5
        uses: actions/delete-package-versions@v5
        with:
          package-name: "ca-app"
          package-type: "container"
          min-versions-to-keep: 5

  # 6. Rollback on failure
  rollback:
    runs-on: ubuntu-latest
    needs: [prepare, build, push]
    if: failure()
    steps:
      - name: Log rollback attempt
        run: echo "Build/Push failed â€” restoring previous Docker image"
      # Note: Actual rollback depends on how deployment is handled.
      # Example (re-pull previous image):
      # docker pull ghcr.io/${{ github.repository_owner }}/ca-app:previous
